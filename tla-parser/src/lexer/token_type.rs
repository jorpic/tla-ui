
#[derive(Debug, Clone, Copy, PartialEq)]
pub enum Keyword {
    Module,
    Extends,
}

#[derive(Debug, Clone, Copy, PartialEq)]
pub enum TokenType {
    Separator,
    Indent,
    Identifier,
    Comment,
    Wildcard,
    Keyword(Keyword),
    ParenOpen,
    ParenClose,
    PrefixOperator,
    InfixOperator,
    PostfixOperator,
    Unknown,
}

// This table must be sorted.
// Dont forget LANG=C if you use unix sort.
pub static KEYWORDS: &'static [(&'static str, TokenType)] = &[
    ("DOMAIN", TokenType::PrefixOperator),
    ("ENABLED", TokenType::PrefixOperator),
    ("EXTENDS", TokenType::Keyword(Keyword::Extends)),
    ("MODULE", TokenType::Keyword(Keyword::Module)),
    ("SUBSET", TokenType::PrefixOperator),
    ("UNCHANGED", TokenType::PrefixOperator),
    ("UNION", TokenType::PrefixOperator),
    ("_", TokenType::Wildcard),
];

// This table must be sorted.
// Dont forget LANG=C if you use unix sort.
pub static OPERATORS: &'static [(&'static str, TokenType)] = &[
    ("!!", TokenType::InfixOperator),
    ("#", TokenType::InfixOperator),
    ("##", TokenType::InfixOperator),
    ("$", TokenType::InfixOperator),
    ("$$", TokenType::InfixOperator),
    ("%", TokenType::InfixOperator),
    ("%%", TokenType::InfixOperator),
    ("&", TokenType::InfixOperator),
    ("&&", TokenType::InfixOperator),
    ("'", TokenType::PostfixOperator),
    ("(+)", TokenType::InfixOperator),
    ("(-)", TokenType::InfixOperator),
    ("(.)", TokenType::InfixOperator),
    ("(/)", TokenType::InfixOperator),
    ("(\\X)", TokenType::InfixOperator),
    ("*", TokenType::InfixOperator),
    ("**", TokenType::InfixOperator),
    ("+", TokenType::InfixOperator),
    ("++", TokenType::InfixOperator),
    ("-", TokenType::InfixOperator),
    ("-+->", TokenType::InfixOperator),
    ("--", TokenType::InfixOperator),
    ("-.", TokenType::PrefixOperator),
    ("-|", TokenType::InfixOperator),
    ("..", TokenType::InfixOperator),
    ("...", TokenType::InfixOperator),
    ("/", TokenType::InfixOperator),
    ("//", TokenType::InfixOperator),
    ("/=", TokenType::InfixOperator),
    ("/\\", TokenType::InfixOperator),
    ("::=", TokenType::InfixOperator),
    (":=", TokenType::InfixOperator),
    (":>", TokenType::InfixOperator),
    ("<", TokenType::InfixOperator),
    ("<:", TokenType::InfixOperator),
    ("<=", TokenType::InfixOperator),
    ("<=>", TokenType::InfixOperator),
    ("<>", TokenType::PrefixOperator),
    ("=", TokenType::InfixOperator),
    ("=<", TokenType::InfixOperator),
    ("=>", TokenType::InfixOperator),
    ("=|", TokenType::InfixOperator),
    (">", TokenType::InfixOperator),
    (">=", TokenType::InfixOperator),
    ("??", TokenType::InfixOperator),
    ("@@", TokenType::InfixOperator),
    ("[]", TokenType::PrefixOperator),
    ("\\", TokenType::InfixOperator),
    ("\\/", TokenType::InfixOperator),
    ("\\X", TokenType::InfixOperator),
    ("\\approx", TokenType::InfixOperator),
    ("\\asymp", TokenType::InfixOperator),
    ("\\bigcirc", TokenType::InfixOperator),
    ("\\bullet", TokenType::InfixOperator),
    ("\\cap", TokenType::InfixOperator),
    ("\\cdot", TokenType::InfixOperator),
    ("\\circ", TokenType::InfixOperator),
    ("\\cong", TokenType::InfixOperator),
    ("\\cup", TokenType::InfixOperator),
    ("\\div", TokenType::InfixOperator),
    ("\\doteq", TokenType::InfixOperator),
    ("\\equiv", TokenType::InfixOperator),
    ("\\geq", TokenType::InfixOperator),
    ("\\gg", TokenType::InfixOperator),
    ("\\in", TokenType::InfixOperator),
    ("\\intersect", TokenType::InfixOperator),
    ("\\land", TokenType::InfixOperator),
    ("\\leq", TokenType::InfixOperator),
    ("\\ll", TokenType::InfixOperator),
    ("\\lnot", TokenType::PrefixOperator),
    ("\\lor", TokenType::InfixOperator),
    ("\\neg", TokenType::PrefixOperator),
    ("\\notin", TokenType::InfixOperator),
    ("\\o", TokenType::InfixOperator),
    ("\\odot", TokenType::InfixOperator),
    ("\\ominus", TokenType::InfixOperator),
    ("\\oplus", TokenType::InfixOperator),
    ("\\oslash", TokenType::InfixOperator),
    ("\\otimes", TokenType::InfixOperator),
    ("\\prec", TokenType::InfixOperator),
    ("\\preceq", TokenType::InfixOperator),
    ("\\propto", TokenType::InfixOperator),
    ("\\sim", TokenType::InfixOperator),
    ("\\simeq", TokenType::InfixOperator),
    ("\\sqcap", TokenType::InfixOperator),
    ("\\sqcup", TokenType::InfixOperator),
    ("\\sqsubset", TokenType::InfixOperator),
    ("\\sqsubseteq", TokenType::InfixOperator),
    ("\\sqsupset", TokenType::InfixOperator),
    ("\\sqsupseteq", TokenType::InfixOperator),
    ("\\star", TokenType::InfixOperator),
    ("\\subset", TokenType::InfixOperator),
    ("\\subseteq", TokenType::InfixOperator),
    ("\\succ", TokenType::InfixOperator),
    ("\\succeq", TokenType::InfixOperator),
    ("\\supset", TokenType::InfixOperator),
    ("\\supseteq", TokenType::InfixOperator),
    ("\\times", TokenType::InfixOperator),
    ("\\union", TokenType::InfixOperator),
    ("\\uplus", TokenType::InfixOperator),
    ("\\wr", TokenType::InfixOperator),
    ("^", TokenType::InfixOperator),
    ("^#", TokenType::PostfixOperator),
    ("^*", TokenType::PostfixOperator),
    ("^+", TokenType::PostfixOperator),
    ("^^", TokenType::InfixOperator),
    ("|", TokenType::InfixOperator),
    ("|-", TokenType::InfixOperator),
    ("|=", TokenType::InfixOperator),
    ("||", TokenType::InfixOperator),
    ("~", TokenType::PrefixOperator),
    ("~>", TokenType::InfixOperator),
];

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn tables_are_sorted() {
        assert!(KEYWORDS.is_sorted_by_key(|t| t.0));
        assert!(OPERATORS.is_sorted_by_key(|t| t.0));
    }
}
